/*
 * Solar.web Query API (SWQAPI)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.FroniusSolarWebClient.Client.OpenAPIDateConverter;

namespace kern.services.FroniusSolarWebClient.Model
{
    /// <summary>
    /// DeviceFirmware
    /// </summary>
    [DataContract(Name = "Device_firmware")]
    public partial class DeviceFirmware : IEquatable<DeviceFirmware>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceFirmware" /> class.
        /// </summary>
        /// <param name="updateAvailable">updateAvailable.</param>
        /// <param name="installedVersion">installedVersion.</param>
        /// <param name="availableVersion">availableVersion.</param>
        public DeviceFirmware(bool? updateAvailable = default(bool?), string installedVersion = default(string), string availableVersion = default(string))
        {
            this.UpdateAvailable = updateAvailable;
            this.InstalledVersion = installedVersion;
            this.AvailableVersion = availableVersion;
        }

        /// <summary>
        /// Gets or Sets UpdateAvailable
        /// </summary>
        [DataMember(Name = "updateAvailable", EmitDefaultValue = true)]
        public bool? UpdateAvailable { get; set; }

        /// <summary>
        /// Gets or Sets InstalledVersion
        /// </summary>
        [DataMember(Name = "installedVersion", EmitDefaultValue = true)]
        public string InstalledVersion { get; set; }

        /// <summary>
        /// Gets or Sets AvailableVersion
        /// </summary>
        [DataMember(Name = "availableVersion", EmitDefaultValue = true)]
        public string AvailableVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceFirmware {\n");
            sb.Append("  UpdateAvailable: ").Append(UpdateAvailable).Append("\n");
            sb.Append("  InstalledVersion: ").Append(InstalledVersion).Append("\n");
            sb.Append("  AvailableVersion: ").Append(AvailableVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceFirmware);
        }

        /// <summary>
        /// Returns true if DeviceFirmware instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceFirmware to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceFirmware input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UpdateAvailable == input.UpdateAvailable ||
                    (this.UpdateAvailable != null &&
                    this.UpdateAvailable.Equals(input.UpdateAvailable))
                ) && 
                (
                    this.InstalledVersion == input.InstalledVersion ||
                    (this.InstalledVersion != null &&
                    this.InstalledVersion.Equals(input.InstalledVersion))
                ) && 
                (
                    this.AvailableVersion == input.AvailableVersion ||
                    (this.AvailableVersion != null &&
                    this.AvailableVersion.Equals(input.AvailableVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UpdateAvailable != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateAvailable.GetHashCode();
                }
                if (this.InstalledVersion != null)
                {
                    hashCode = (hashCode * 59) + this.InstalledVersion.GetHashCode();
                }
                if (this.AvailableVersion != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableVersion.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
