/*
 * Solar.web Query API (SWQAPI)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.FroniusSolarWebClient.Client.OpenAPIDateConverter;

namespace kern.services.FroniusSolarWebClient.Model
{
    /// <summary>
    /// SystemMessage
    /// </summary>
    [DataContract(Name = "SystemMessage")]
    public partial class SystemMessage : IEquatable<SystemMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemMessage" /> class.
        /// </summary>
        /// <param name="pvSystemId">pvSystemId.</param>
        /// <param name="deviceId">deviceId.</param>
        /// <param name="stateType">stateType.</param>
        /// <param name="stateCode">stateCode.</param>
        /// <param name="stateSeverity">stateSeverity.</param>
        /// <param name="logDateTime">logDateTime.</param>
        /// <param name="text">text.</param>
        /// <param name="deviceName">deviceName.</param>
        public SystemMessage(Guid pvSystemId = default(Guid), Guid? deviceId = default(Guid?), string stateType = default(string), int stateCode = default(int), string stateSeverity = default(string), string logDateTime = default(string), string text = default(string), string deviceName = default(string))
        {
            this.PvSystemId = pvSystemId;
            this.DeviceId = deviceId;
            this.StateType = stateType;
            this.StateCode = stateCode;
            this.StateSeverity = stateSeverity;
            this.LogDateTime = logDateTime;
            this.Text = text;
            this.DeviceName = deviceName;
        }

        /// <summary>
        /// Gets or Sets PvSystemId
        /// </summary>
        [DataMember(Name = "pvSystemId", EmitDefaultValue = false)]
        public Guid PvSystemId { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name = "deviceId", EmitDefaultValue = true)]
        public Guid? DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets StateType
        /// </summary>
        [DataMember(Name = "stateType", EmitDefaultValue = true)]
        public string StateType { get; set; }

        /// <summary>
        /// Gets or Sets StateCode
        /// </summary>
        [DataMember(Name = "stateCode", EmitDefaultValue = false)]
        public int StateCode { get; set; }

        /// <summary>
        /// Gets or Sets StateSeverity
        /// </summary>
        [DataMember(Name = "stateSeverity", EmitDefaultValue = true)]
        public string StateSeverity { get; set; }

        /// <summary>
        /// Gets or Sets LogDateTime
        /// </summary>
        [DataMember(Name = "logDateTime", EmitDefaultValue = true)]
        public string LogDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets DeviceName
        /// </summary>
        [DataMember(Name = "deviceName", EmitDefaultValue = true)]
        public string DeviceName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemMessage {\n");
            sb.Append("  PvSystemId: ").Append(PvSystemId).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  StateType: ").Append(StateType).Append("\n");
            sb.Append("  StateCode: ").Append(StateCode).Append("\n");
            sb.Append("  StateSeverity: ").Append(StateSeverity).Append("\n");
            sb.Append("  LogDateTime: ").Append(LogDateTime).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  DeviceName: ").Append(DeviceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemMessage);
        }

        /// <summary>
        /// Returns true if SystemMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemMessage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PvSystemId == input.PvSystemId ||
                    (this.PvSystemId != null &&
                    this.PvSystemId.Equals(input.PvSystemId))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.StateType == input.StateType ||
                    (this.StateType != null &&
                    this.StateType.Equals(input.StateType))
                ) && 
                (
                    this.StateCode == input.StateCode ||
                    this.StateCode.Equals(input.StateCode)
                ) && 
                (
                    this.StateSeverity == input.StateSeverity ||
                    (this.StateSeverity != null &&
                    this.StateSeverity.Equals(input.StateSeverity))
                ) && 
                (
                    this.LogDateTime == input.LogDateTime ||
                    (this.LogDateTime != null &&
                    this.LogDateTime.Equals(input.LogDateTime))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.DeviceName == input.DeviceName ||
                    (this.DeviceName != null &&
                    this.DeviceName.Equals(input.DeviceName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PvSystemId != null)
                {
                    hashCode = (hashCode * 59) + this.PvSystemId.GetHashCode();
                }
                if (this.DeviceId != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceId.GetHashCode();
                }
                if (this.StateType != null)
                {
                    hashCode = (hashCode * 59) + this.StateType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StateCode.GetHashCode();
                if (this.StateSeverity != null)
                {
                    hashCode = (hashCode * 59) + this.StateSeverity.GetHashCode();
                }
                if (this.LogDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.LogDateTime.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.DeviceName != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
