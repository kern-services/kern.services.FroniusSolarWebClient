/*
 * Solar.web Query API (SWQAPI)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.FroniusSolarWebClient.Client.OpenAPIDateConverter;

namespace kern.services.FroniusSolarWebClient.Model
{
    /// <summary>
    /// ReleaseInfo
    /// </summary>
    [DataContract(Name = "ReleaseInfo")]
    public partial class ReleaseInfo : IEquatable<ReleaseInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseInfo" /> class.
        /// </summary>
        /// <param name="releaseVersion">releaseVersion.</param>
        /// <param name="releaseDate">releaseDate.</param>
        public ReleaseInfo(string releaseVersion = default(string), string releaseDate = default(string))
        {
            this.ReleaseVersion = releaseVersion;
            this.ReleaseDate = releaseDate;
        }

        /// <summary>
        /// Gets or Sets ReleaseVersion
        /// </summary>
        [DataMember(Name = "releaseVersion", EmitDefaultValue = true)]
        public string ReleaseVersion { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseDate
        /// </summary>
        [DataMember(Name = "releaseDate", EmitDefaultValue = true)]
        public string ReleaseDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReleaseInfo {\n");
            sb.Append("  ReleaseVersion: ").Append(ReleaseVersion).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseInfo);
        }

        /// <summary>
        /// Returns true if ReleaseInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReleaseVersion == input.ReleaseVersion ||
                    (this.ReleaseVersion != null &&
                    this.ReleaseVersion.Equals(input.ReleaseVersion))
                ) && 
                (
                    this.ReleaseDate == input.ReleaseDate ||
                    (this.ReleaseDate != null &&
                    this.ReleaseDate.Equals(input.ReleaseDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReleaseVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ReleaseVersion.GetHashCode();
                }
                if (this.ReleaseDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReleaseDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
