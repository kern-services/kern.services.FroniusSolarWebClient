/*
 * Solar.web Query API (SWQAPI)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.FroniusSolarWebClient.Client.OpenAPIDateConverter;

namespace kern.services.FroniusSolarWebClient.Model
{
    /// <summary>
    /// DevicePeakPower
    /// </summary>
    [DataContract(Name = "Device_peakPower")]
    public partial class DevicePeakPower : IEquatable<DevicePeakPower>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DevicePeakPower" /> class.
        /// </summary>
        /// <param name="dc1">dc1.</param>
        /// <param name="dc2">dc2.</param>
        /// <param name="dc3">dc3.</param>
        /// <param name="dc4">dc4.</param>
        public DevicePeakPower(double? dc1 = default(double?), double? dc2 = default(double?), double? dc3 = default(double?), double? dc4 = default(double?))
        {
            this.Dc1 = dc1;
            this.Dc2 = dc2;
            this.Dc3 = dc3;
            this.Dc4 = dc4;
        }

        /// <summary>
        /// Gets or Sets Dc1
        /// </summary>
        [DataMember(Name = "dc1", EmitDefaultValue = true)]
        public double? Dc1 { get; set; }

        /// <summary>
        /// Gets or Sets Dc2
        /// </summary>
        [DataMember(Name = "dc2", EmitDefaultValue = true)]
        public double? Dc2 { get; set; }

        /// <summary>
        /// Gets or Sets Dc3
        /// </summary>
        [DataMember(Name = "dc3", EmitDefaultValue = true)]
        public double? Dc3 { get; set; }

        /// <summary>
        /// Gets or Sets Dc4
        /// </summary>
        [DataMember(Name = "dc4", EmitDefaultValue = true)]
        public double? Dc4 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DevicePeakPower {\n");
            sb.Append("  Dc1: ").Append(Dc1).Append("\n");
            sb.Append("  Dc2: ").Append(Dc2).Append("\n");
            sb.Append("  Dc3: ").Append(Dc3).Append("\n");
            sb.Append("  Dc4: ").Append(Dc4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DevicePeakPower);
        }

        /// <summary>
        /// Returns true if DevicePeakPower instances are equal
        /// </summary>
        /// <param name="input">Instance of DevicePeakPower to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DevicePeakPower input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dc1 == input.Dc1 ||
                    (this.Dc1 != null &&
                    this.Dc1.Equals(input.Dc1))
                ) && 
                (
                    this.Dc2 == input.Dc2 ||
                    (this.Dc2 != null &&
                    this.Dc2.Equals(input.Dc2))
                ) && 
                (
                    this.Dc3 == input.Dc3 ||
                    (this.Dc3 != null &&
                    this.Dc3.Equals(input.Dc3))
                ) && 
                (
                    this.Dc4 == input.Dc4 ||
                    (this.Dc4 != null &&
                    this.Dc4.Equals(input.Dc4))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dc1 != null)
                {
                    hashCode = (hashCode * 59) + this.Dc1.GetHashCode();
                }
                if (this.Dc2 != null)
                {
                    hashCode = (hashCode * 59) + this.Dc2.GetHashCode();
                }
                if (this.Dc3 != null)
                {
                    hashCode = (hashCode * 59) + this.Dc3.GetHashCode();
                }
                if (this.Dc4 != null)
                {
                    hashCode = (hashCode * 59) + this.Dc4.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
