/*
 * Solar.web Query API (SWQAPI)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = kern.services.FroniusSolarWebClient.Client.OpenAPIDateConverter;

namespace kern.services.FroniusSolarWebClient.Model
{
    /// <summary>
    /// Device
    /// </summary>
    [DataContract(Name = "Device")]
    public partial class Device : IEquatable<Device>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        /// <param name="deviceType">deviceType.</param>
        /// <param name="deviceId">deviceId.</param>
        /// <param name="deviceName">deviceName.</param>
        /// <param name="deviceManufacturer">deviceManufacturer.</param>
        /// <param name="deviceCategory">deviceCategory.</param>
        /// <param name="deviceLocation">deviceLocation.</param>
        /// <param name="deviceTypeDetails">deviceTypeDetails.</param>
        /// <param name="serialNumber">serialNumber.</param>
        /// <param name="dataloggerId">dataloggerId.</param>
        /// <param name="nodeType">nodeType.</param>
        /// <param name="numberMPPTrackers">numberMPPTrackers.</param>
        /// <param name="numberPhases">numberPhases.</param>
        /// <param name="peakPower">peakPower.</param>
        /// <param name="nominalAcPower">nominalAcPower.</param>
        /// <param name="capacity">capacity.</param>
        /// <param name="firmware">firmware.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="activationDate">activationDate.</param>
        /// <param name="deactivationDate">deactivationDate.</param>
        /// <param name="isOnline">isOnline.</param>
        /// <param name="ipAddressV4">ipAddressV4.</param>
        /// <param name="sensors">sensors.</param>
        public Device(string deviceType = default(string), Guid deviceId = default(Guid), string deviceName = default(string), string deviceManufacturer = default(string), string deviceCategory = default(string), string deviceLocation = default(string), string deviceTypeDetails = default(string), string serialNumber = default(string), string dataloggerId = default(string), int? nodeType = default(int?), int? numberMPPTrackers = default(int?), int? numberPhases = default(int?), DevicePeakPower peakPower = default(DevicePeakPower), double? nominalAcPower = default(double?), int? capacity = default(int?), DeviceFirmware firmware = default(DeviceFirmware), bool? isActive = default(bool?), string activationDate = default(string), string deactivationDate = default(string), bool isOnline = default(bool), string ipAddressV4 = default(string), List<Sensor> sensors = default(List<Sensor>))
        {
            this.DeviceType = deviceType;
            this.DeviceId = deviceId;
            this.DeviceName = deviceName;
            this.DeviceManufacturer = deviceManufacturer;
            this.DeviceCategory = deviceCategory;
            this.DeviceLocation = deviceLocation;
            this.DeviceTypeDetails = deviceTypeDetails;
            this.SerialNumber = serialNumber;
            this.DataloggerId = dataloggerId;
            this.NodeType = nodeType;
            this.NumberMPPTrackers = numberMPPTrackers;
            this.NumberPhases = numberPhases;
            this.PeakPower = peakPower;
            this.NominalAcPower = nominalAcPower;
            this.Capacity = capacity;
            this.Firmware = firmware;
            this.IsActive = isActive;
            this.ActivationDate = activationDate;
            this.DeactivationDate = deactivationDate;
            this.IsOnline = isOnline;
            this.IpAddressV4 = ipAddressV4;
            this.Sensors = sensors;
        }

        /// <summary>
        /// Gets or Sets DeviceType
        /// </summary>
        [DataMember(Name = "deviceType", EmitDefaultValue = true)]
        public string DeviceType { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name = "deviceId", EmitDefaultValue = false)]
        public Guid DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets DeviceName
        /// </summary>
        [DataMember(Name = "deviceName", EmitDefaultValue = true)]
        public string DeviceName { get; set; }

        /// <summary>
        /// Gets or Sets DeviceManufacturer
        /// </summary>
        [DataMember(Name = "deviceManufacturer", EmitDefaultValue = true)]
        public string DeviceManufacturer { get; set; }

        /// <summary>
        /// Gets or Sets DeviceCategory
        /// </summary>
        [DataMember(Name = "deviceCategory", EmitDefaultValue = true)]
        public string DeviceCategory { get; set; }

        /// <summary>
        /// Gets or Sets DeviceLocation
        /// </summary>
        [DataMember(Name = "deviceLocation", EmitDefaultValue = true)]
        public string DeviceLocation { get; set; }

        /// <summary>
        /// Gets or Sets DeviceTypeDetails
        /// </summary>
        [DataMember(Name = "deviceTypeDetails", EmitDefaultValue = true)]
        public string DeviceTypeDetails { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name = "serialNumber", EmitDefaultValue = true)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets DataloggerId
        /// </summary>
        [DataMember(Name = "dataloggerId", EmitDefaultValue = true)]
        public string DataloggerId { get; set; }

        /// <summary>
        /// Gets or Sets NodeType
        /// </summary>
        [DataMember(Name = "nodeType", EmitDefaultValue = true)]
        public int? NodeType { get; set; }

        /// <summary>
        /// Gets or Sets NumberMPPTrackers
        /// </summary>
        [DataMember(Name = "numberMPPTrackers", EmitDefaultValue = true)]
        public int? NumberMPPTrackers { get; set; }

        /// <summary>
        /// Gets or Sets NumberPhases
        /// </summary>
        [DataMember(Name = "numberPhases", EmitDefaultValue = true)]
        public int? NumberPhases { get; set; }

        /// <summary>
        /// Gets or Sets PeakPower
        /// </summary>
        [DataMember(Name = "peakPower", EmitDefaultValue = true)]
        public DevicePeakPower PeakPower { get; set; }

        /// <summary>
        /// Gets or Sets NominalAcPower
        /// </summary>
        [DataMember(Name = "nominalAcPower", EmitDefaultValue = true)]
        public double? NominalAcPower { get; set; }

        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name = "capacity", EmitDefaultValue = true)]
        public int? Capacity { get; set; }

        /// <summary>
        /// Gets or Sets Firmware
        /// </summary>
        [DataMember(Name = "firmware", EmitDefaultValue = true)]
        public DeviceFirmware Firmware { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets ActivationDate
        /// </summary>
        [DataMember(Name = "activationDate", EmitDefaultValue = true)]
        public string ActivationDate { get; set; }

        /// <summary>
        /// Gets or Sets DeactivationDate
        /// </summary>
        [DataMember(Name = "deactivationDate", EmitDefaultValue = true)]
        public string DeactivationDate { get; set; }

        /// <summary>
        /// Gets or Sets IsOnline
        /// </summary>
        [DataMember(Name = "isOnline", EmitDefaultValue = true)]
        public bool IsOnline { get; set; }

        /// <summary>
        /// Gets or Sets IpAddressV4
        /// </summary>
        [DataMember(Name = "ipAddressV4", EmitDefaultValue = true)]
        public string IpAddressV4 { get; set; }

        /// <summary>
        /// Gets or Sets Sensors
        /// </summary>
        [DataMember(Name = "sensors", EmitDefaultValue = true)]
        public List<Sensor> Sensors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Device {\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  DeviceName: ").Append(DeviceName).Append("\n");
            sb.Append("  DeviceManufacturer: ").Append(DeviceManufacturer).Append("\n");
            sb.Append("  DeviceCategory: ").Append(DeviceCategory).Append("\n");
            sb.Append("  DeviceLocation: ").Append(DeviceLocation).Append("\n");
            sb.Append("  DeviceTypeDetails: ").Append(DeviceTypeDetails).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  DataloggerId: ").Append(DataloggerId).Append("\n");
            sb.Append("  NodeType: ").Append(NodeType).Append("\n");
            sb.Append("  NumberMPPTrackers: ").Append(NumberMPPTrackers).Append("\n");
            sb.Append("  NumberPhases: ").Append(NumberPhases).Append("\n");
            sb.Append("  PeakPower: ").Append(PeakPower).Append("\n");
            sb.Append("  NominalAcPower: ").Append(NominalAcPower).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  Firmware: ").Append(Firmware).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  ActivationDate: ").Append(ActivationDate).Append("\n");
            sb.Append("  DeactivationDate: ").Append(DeactivationDate).Append("\n");
            sb.Append("  IsOnline: ").Append(IsOnline).Append("\n");
            sb.Append("  IpAddressV4: ").Append(IpAddressV4).Append("\n");
            sb.Append("  Sensors: ").Append(Sensors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Device);
        }

        /// <summary>
        /// Returns true if Device instances are equal
        /// </summary>
        /// <param name="input">Instance of Device to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Device input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DeviceType == input.DeviceType ||
                    (this.DeviceType != null &&
                    this.DeviceType.Equals(input.DeviceType))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.DeviceName == input.DeviceName ||
                    (this.DeviceName != null &&
                    this.DeviceName.Equals(input.DeviceName))
                ) && 
                (
                    this.DeviceManufacturer == input.DeviceManufacturer ||
                    (this.DeviceManufacturer != null &&
                    this.DeviceManufacturer.Equals(input.DeviceManufacturer))
                ) && 
                (
                    this.DeviceCategory == input.DeviceCategory ||
                    (this.DeviceCategory != null &&
                    this.DeviceCategory.Equals(input.DeviceCategory))
                ) && 
                (
                    this.DeviceLocation == input.DeviceLocation ||
                    (this.DeviceLocation != null &&
                    this.DeviceLocation.Equals(input.DeviceLocation))
                ) && 
                (
                    this.DeviceTypeDetails == input.DeviceTypeDetails ||
                    (this.DeviceTypeDetails != null &&
                    this.DeviceTypeDetails.Equals(input.DeviceTypeDetails))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.DataloggerId == input.DataloggerId ||
                    (this.DataloggerId != null &&
                    this.DataloggerId.Equals(input.DataloggerId))
                ) && 
                (
                    this.NodeType == input.NodeType ||
                    (this.NodeType != null &&
                    this.NodeType.Equals(input.NodeType))
                ) && 
                (
                    this.NumberMPPTrackers == input.NumberMPPTrackers ||
                    (this.NumberMPPTrackers != null &&
                    this.NumberMPPTrackers.Equals(input.NumberMPPTrackers))
                ) && 
                (
                    this.NumberPhases == input.NumberPhases ||
                    (this.NumberPhases != null &&
                    this.NumberPhases.Equals(input.NumberPhases))
                ) && 
                (
                    this.PeakPower == input.PeakPower ||
                    (this.PeakPower != null &&
                    this.PeakPower.Equals(input.PeakPower))
                ) && 
                (
                    this.NominalAcPower == input.NominalAcPower ||
                    (this.NominalAcPower != null &&
                    this.NominalAcPower.Equals(input.NominalAcPower))
                ) && 
                (
                    this.Capacity == input.Capacity ||
                    (this.Capacity != null &&
                    this.Capacity.Equals(input.Capacity))
                ) && 
                (
                    this.Firmware == input.Firmware ||
                    (this.Firmware != null &&
                    this.Firmware.Equals(input.Firmware))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.ActivationDate == input.ActivationDate ||
                    (this.ActivationDate != null &&
                    this.ActivationDate.Equals(input.ActivationDate))
                ) && 
                (
                    this.DeactivationDate == input.DeactivationDate ||
                    (this.DeactivationDate != null &&
                    this.DeactivationDate.Equals(input.DeactivationDate))
                ) && 
                (
                    this.IsOnline == input.IsOnline ||
                    this.IsOnline.Equals(input.IsOnline)
                ) && 
                (
                    this.IpAddressV4 == input.IpAddressV4 ||
                    (this.IpAddressV4 != null &&
                    this.IpAddressV4.Equals(input.IpAddressV4))
                ) && 
                (
                    this.Sensors == input.Sensors ||
                    this.Sensors != null &&
                    input.Sensors != null &&
                    this.Sensors.SequenceEqual(input.Sensors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeviceType != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceType.GetHashCode();
                }
                if (this.DeviceId != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceId.GetHashCode();
                }
                if (this.DeviceName != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceName.GetHashCode();
                }
                if (this.DeviceManufacturer != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceManufacturer.GetHashCode();
                }
                if (this.DeviceCategory != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceCategory.GetHashCode();
                }
                if (this.DeviceLocation != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceLocation.GetHashCode();
                }
                if (this.DeviceTypeDetails != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceTypeDetails.GetHashCode();
                }
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                if (this.DataloggerId != null)
                {
                    hashCode = (hashCode * 59) + this.DataloggerId.GetHashCode();
                }
                if (this.NodeType != null)
                {
                    hashCode = (hashCode * 59) + this.NodeType.GetHashCode();
                }
                if (this.NumberMPPTrackers != null)
                {
                    hashCode = (hashCode * 59) + this.NumberMPPTrackers.GetHashCode();
                }
                if (this.NumberPhases != null)
                {
                    hashCode = (hashCode * 59) + this.NumberPhases.GetHashCode();
                }
                if (this.PeakPower != null)
                {
                    hashCode = (hashCode * 59) + this.PeakPower.GetHashCode();
                }
                if (this.NominalAcPower != null)
                {
                    hashCode = (hashCode * 59) + this.NominalAcPower.GetHashCode();
                }
                if (this.Capacity != null)
                {
                    hashCode = (hashCode * 59) + this.Capacity.GetHashCode();
                }
                if (this.Firmware != null)
                {
                    hashCode = (hashCode * 59) + this.Firmware.GetHashCode();
                }
                if (this.IsActive != null)
                {
                    hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                }
                if (this.ActivationDate != null)
                {
                    hashCode = (hashCode * 59) + this.ActivationDate.GetHashCode();
                }
                if (this.DeactivationDate != null)
                {
                    hashCode = (hashCode * 59) + this.DeactivationDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsOnline.GetHashCode();
                if (this.IpAddressV4 != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddressV4.GetHashCode();
                }
                if (this.Sensors != null)
                {
                    hashCode = (hashCode * 59) + this.Sensors.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
