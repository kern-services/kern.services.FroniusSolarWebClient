/*
 * Solar.web Query API (SWQAPI)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using kern.services.FroniusSolarWebClient.Client;
using kern.services.FroniusSolarWebClient.Model;

namespace kern.services.FroniusSolarWebClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemMessagesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the total count of system messages for a certain Device of a PV System
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SystemMessageList</returns>
        SystemMessageList PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGet(Guid pvSystemId, Guid deviceId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? languageCode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Gets the total count of system messages for a certain Device of a PV System
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SystemMessageList</returns>
        ApiResponse<SystemMessageList> PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGetWithHttpInfo(Guid pvSystemId, Guid deviceId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? languageCode = default(string?), int operationIndex = 0);
        /// <summary>
        /// Gets system messages for a certain Device of a PV System
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SystemMessageList</returns>
        SystemMessageList PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGet(Guid pvSystemId, Guid deviceId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Gets system messages for a certain Device of a PV System
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SystemMessageList</returns>
        ApiResponse<SystemMessageList> PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGetWithHttpInfo(Guid pvSystemId, Guid deviceId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Gets the total count of system messages for a certain PV System
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SystemMessageList</returns>
        SystemMessageList PvsystemsPvSystemIdMessagesCountGet(Guid pvSystemId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? type = default(string?), string? languageCode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Gets the total count of system messages for a certain PV System
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SystemMessageList</returns>
        ApiResponse<SystemMessageList> PvsystemsPvSystemIdMessagesCountGetWithHttpInfo(Guid pvSystemId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? type = default(string?), string? languageCode = default(string?), int operationIndex = 0);
        /// <summary>
        /// Gets system messages for a certain PV System
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SystemMessageList</returns>
        SystemMessageList PvsystemsPvSystemIdMessagesLanguageCodeGet(Guid pvSystemId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), string? type = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Gets system messages for a certain PV System
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SystemMessageList</returns>
        ApiResponse<SystemMessageList> PvsystemsPvSystemIdMessagesLanguageCodeGetWithHttpInfo(Guid pvSystemId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), string? type = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemMessagesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Gets the total count of system messages for a certain Device of a PV System
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemMessageList</returns>
        System.Threading.Tasks.Task<SystemMessageList> PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGetAsync(Guid pvSystemId, Guid deviceId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? languageCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the total count of system messages for a certain Device of a PV System
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemMessageList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemMessageList>> PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGetWithHttpInfoAsync(Guid pvSystemId, Guid deviceId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? languageCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets system messages for a certain Device of a PV System
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemMessageList</returns>
        System.Threading.Tasks.Task<SystemMessageList> PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGetAsync(Guid pvSystemId, Guid deviceId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets system messages for a certain Device of a PV System
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemMessageList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemMessageList>> PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGetWithHttpInfoAsync(Guid pvSystemId, Guid deviceId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the total count of system messages for a certain PV System
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemMessageList</returns>
        System.Threading.Tasks.Task<SystemMessageList> PvsystemsPvSystemIdMessagesCountGetAsync(Guid pvSystemId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? type = default(string?), string? languageCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the total count of system messages for a certain PV System
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemMessageList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemMessageList>> PvsystemsPvSystemIdMessagesCountGetWithHttpInfoAsync(Guid pvSystemId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? type = default(string?), string? languageCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets system messages for a certain PV System
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemMessageList</returns>
        System.Threading.Tasks.Task<SystemMessageList> PvsystemsPvSystemIdMessagesLanguageCodeGetAsync(Guid pvSystemId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), string? type = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets system messages for a certain PV System
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemMessageList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemMessageList>> PvsystemsPvSystemIdMessagesLanguageCodeGetWithHttpInfoAsync(Guid pvSystemId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), string? type = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemMessagesApi : ISystemMessagesApiSync, ISystemMessagesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SystemMessagesApi : ISystemMessagesApi
    {
        private kern.services.FroniusSolarWebClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemMessagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemMessagesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemMessagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemMessagesApi(string basePath)
        {
            this.Configuration = kern.services.FroniusSolarWebClient.Client.Configuration.MergeConfigurations(
                kern.services.FroniusSolarWebClient.Client.GlobalConfiguration.Instance,
                new kern.services.FroniusSolarWebClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = kern.services.FroniusSolarWebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemMessagesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SystemMessagesApi(kern.services.FroniusSolarWebClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = kern.services.FroniusSolarWebClient.Client.Configuration.MergeConfigurations(
                kern.services.FroniusSolarWebClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = kern.services.FroniusSolarWebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemMessagesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SystemMessagesApi(kern.services.FroniusSolarWebClient.Client.ISynchronousClient client, kern.services.FroniusSolarWebClient.Client.IAsynchronousClient asyncClient, kern.services.FroniusSolarWebClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = kern.services.FroniusSolarWebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public kern.services.FroniusSolarWebClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public kern.services.FroniusSolarWebClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public kern.services.FroniusSolarWebClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public kern.services.FroniusSolarWebClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the total count of system messages for a certain Device of a PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SystemMessageList</returns>
        public SystemMessageList PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGet(Guid pvSystemId, Guid deviceId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? languageCode = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList> localVarResponse = PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGetWithHttpInfo(pvSystemId, deviceId, from, stateType, stateCode, stateSeverity, to, languageCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the total count of system messages for a certain Device of a PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SystemMessageList</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList> PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGetWithHttpInfo(Guid pvSystemId, Guid deviceId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? languageCode = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'from' when calling SystemMessagesApi->PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGet");
            }

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (stateType != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateType", stateType));
            }
            if (stateCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateCode", stateCode));
            }
            if (stateSeverity != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateSeverity", stateSeverity));
            }
            localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (languageCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "languageCode", languageCode));
            }

            localVarRequestOptions.Operation = "SystemMessagesApi.PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SystemMessageList>("/pvsystems/{pvSystemId}/devices/{deviceId}/messages-count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the total count of system messages for a certain Device of a PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemMessageList</returns>
        public async System.Threading.Tasks.Task<SystemMessageList> PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGetAsync(Guid pvSystemId, Guid deviceId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? languageCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList> localVarResponse = await PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGetWithHttpInfoAsync(pvSystemId, deviceId, from, stateType, stateCode, stateSeverity, to, languageCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the total count of system messages for a certain Device of a PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemMessageList)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList>> PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGetWithHttpInfoAsync(Guid pvSystemId, Guid deviceId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? languageCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'from' when calling SystemMessagesApi->PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGet");
            }


            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (stateType != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateType", stateType));
            }
            if (stateCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateCode", stateCode));
            }
            if (stateSeverity != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateSeverity", stateSeverity));
            }
            localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (languageCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "languageCode", languageCode));
            }

            localVarRequestOptions.Operation = "SystemMessagesApi.PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SystemMessageList>("/pvsystems/{pvSystemId}/devices/{deviceId}/messages-count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdDevicesDeviceIdMessagesCountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets system messages for a certain Device of a PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SystemMessageList</returns>
        public SystemMessageList PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGet(Guid pvSystemId, Guid deviceId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList> localVarResponse = PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGetWithHttpInfo(pvSystemId, deviceId, from, languageCode, stateType, stateCode, stateSeverity, to, timezone, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets system messages for a certain Device of a PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SystemMessageList</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList> PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGetWithHttpInfo(Guid pvSystemId, Guid deviceId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'from' when calling SystemMessagesApi->PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGet");
            }

            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'languageCode' when calling SystemMessagesApi->PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGet");
            }

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("languageCode", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(languageCode)); // path parameter
            if (stateType != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateType", stateType));
            }
            if (stateCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateCode", stateCode));
            }
            if (stateSeverity != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateSeverity", stateSeverity));
            }
            localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "SystemMessagesApi.PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SystemMessageList>("/pvsystems/{pvSystemId}/devices/{deviceId}/messages/{languageCode}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets system messages for a certain Device of a PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemMessageList</returns>
        public async System.Threading.Tasks.Task<SystemMessageList> PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGetAsync(Guid pvSystemId, Guid deviceId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList> localVarResponse = await PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGetWithHttpInfoAsync(pvSystemId, deviceId, from, languageCode, stateType, stateCode, stateSeverity, to, timezone, offset, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets system messages for a certain Device of a PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="deviceId">Device Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemMessageList)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList>> PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGetWithHttpInfoAsync(Guid pvSystemId, Guid deviceId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'from' when calling SystemMessagesApi->PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGet");
            }

            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'languageCode' when calling SystemMessagesApi->PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGet");
            }


            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("languageCode", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(languageCode)); // path parameter
            if (stateType != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateType", stateType));
            }
            if (stateCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateCode", stateCode));
            }
            if (stateSeverity != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateSeverity", stateSeverity));
            }
            localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "SystemMessagesApi.PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SystemMessageList>("/pvsystems/{pvSystemId}/devices/{deviceId}/messages/{languageCode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdDevicesDeviceIdMessagesLanguageCodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the total count of system messages for a certain PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SystemMessageList</returns>
        public SystemMessageList PvsystemsPvSystemIdMessagesCountGet(Guid pvSystemId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? type = default(string?), string? languageCode = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList> localVarResponse = PvsystemsPvSystemIdMessagesCountGetWithHttpInfo(pvSystemId, from, stateType, stateCode, stateSeverity, to, type, languageCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the total count of system messages for a certain PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SystemMessageList</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList> PvsystemsPvSystemIdMessagesCountGetWithHttpInfo(Guid pvSystemId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? type = default(string?), string? languageCode = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'from' when calling SystemMessagesApi->PvsystemsPvSystemIdMessagesCountGet");
            }

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            if (stateType != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateType", stateType));
            }
            if (stateCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateCode", stateCode));
            }
            if (stateSeverity != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateSeverity", stateSeverity));
            }
            localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (languageCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "languageCode", languageCode));
            }

            localVarRequestOptions.Operation = "SystemMessagesApi.PvsystemsPvSystemIdMessagesCountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SystemMessageList>("/pvsystems/{pvSystemId}/messages-count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdMessagesCountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the total count of system messages for a certain PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemMessageList</returns>
        public async System.Threading.Tasks.Task<SystemMessageList> PvsystemsPvSystemIdMessagesCountGetAsync(Guid pvSystemId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? type = default(string?), string? languageCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList> localVarResponse = await PvsystemsPvSystemIdMessagesCountGetWithHttpInfoAsync(pvSystemId, from, stateType, stateCode, stateSeverity, to, type, languageCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the total count of system messages for a certain PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="languageCode">Language code (optional, default to &quot;en&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemMessageList)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList>> PvsystemsPvSystemIdMessagesCountGetWithHttpInfoAsync(Guid pvSystemId, string from, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? type = default(string?), string? languageCode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'from' when calling SystemMessagesApi->PvsystemsPvSystemIdMessagesCountGet");
            }


            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            if (stateType != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateType", stateType));
            }
            if (stateCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateCode", stateCode));
            }
            if (stateSeverity != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateSeverity", stateSeverity));
            }
            localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (languageCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "languageCode", languageCode));
            }

            localVarRequestOptions.Operation = "SystemMessagesApi.PvsystemsPvSystemIdMessagesCountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SystemMessageList>("/pvsystems/{pvSystemId}/messages-count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdMessagesCountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets system messages for a certain PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SystemMessageList</returns>
        public SystemMessageList PvsystemsPvSystemIdMessagesLanguageCodeGet(Guid pvSystemId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), string? type = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList> localVarResponse = PvsystemsPvSystemIdMessagesLanguageCodeGetWithHttpInfo(pvSystemId, from, languageCode, stateType, stateCode, stateSeverity, to, timezone, type, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets system messages for a certain PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SystemMessageList</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList> PvsystemsPvSystemIdMessagesLanguageCodeGetWithHttpInfo(Guid pvSystemId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), string? type = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'from' when calling SystemMessagesApi->PvsystemsPvSystemIdMessagesLanguageCodeGet");
            }

            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'languageCode' when calling SystemMessagesApi->PvsystemsPvSystemIdMessagesLanguageCodeGet");
            }

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("languageCode", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(languageCode)); // path parameter
            if (stateType != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateType", stateType));
            }
            if (stateCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateCode", stateCode));
            }
            if (stateSeverity != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateSeverity", stateSeverity));
            }
            localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "SystemMessagesApi.PvsystemsPvSystemIdMessagesLanguageCodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SystemMessageList>("/pvsystems/{pvSystemId}/messages/{languageCode}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdMessagesLanguageCodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets system messages for a certain PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemMessageList</returns>
        public async System.Threading.Tasks.Task<SystemMessageList> PvsystemsPvSystemIdMessagesLanguageCodeGetAsync(Guid pvSystemId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), string? type = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList> localVarResponse = await PvsystemsPvSystemIdMessagesLanguageCodeGetWithHttpInfoAsync(pvSystemId, from, languageCode, stateType, stateCode, stateSeverity, to, timezone, type, offset, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets system messages for a certain PV System 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">PV System Id</param>
        /// <param name="from">Date from</param>
        /// <param name="languageCode">Language code</param>
        /// <param name="stateType">Type of message. Can be \&quot;Error\&quot; or \&quot;Event\&quot; (optional)</param>
        /// <param name="stateCode">State code (optional)</param>
        /// <param name="stateSeverity">Severity status. Can be \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;information\&quot;, \&quot;unknown\&quot; (optional)</param>
        /// <param name="to">Date to (optional)</param>
        /// <param name="timezone">Timezone for dates in response, \&quot;local\&quot; or \&quot;zulu\&quot;. Zulu is default. (optional)</param>
        /// <param name="type">Device type (optional)</param>
        /// <param name="offset">Skip this many elements (optional)</param>
        /// <param name="limit">Return max this many elements (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemMessageList)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<SystemMessageList>> PvsystemsPvSystemIdMessagesLanguageCodeGetWithHttpInfoAsync(Guid pvSystemId, string from, string languageCode, string? stateType = default(string?), int? stateCode = default(int?), string? stateSeverity = default(string?), string? to = default(string?), string? timezone = default(string?), string? type = default(string?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'from' is set
            if (from == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'from' when calling SystemMessagesApi->PvsystemsPvSystemIdMessagesLanguageCodeGet");
            }

            // verify the required parameter 'languageCode' is set
            if (languageCode == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'languageCode' when calling SystemMessagesApi->PvsystemsPvSystemIdMessagesLanguageCodeGet");
            }


            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("languageCode", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(languageCode)); // path parameter
            if (stateType != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateType", stateType));
            }
            if (stateCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateCode", stateCode));
            }
            if (stateSeverity != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "stateSeverity", stateSeverity));
            }
            localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (timezone != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "timezone", timezone));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "SystemMessagesApi.PvsystemsPvSystemIdMessagesLanguageCodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SystemMessageList>("/pvsystems/{pvSystemId}/messages/{languageCode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdMessagesLanguageCodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
