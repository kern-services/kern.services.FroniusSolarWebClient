/*
 * Solar.web Query API (SWQAPI)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using kern.services.FroniusSolarWebClient.Client;
using kern.services.FroniusSolarWebClient.Model;

namespace kern.services.FroniusSolarWebClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates new token
        /// </summary>
        /// <remarks>
        /// This method creates a new JWT access token and also a refresh token by logging in with the user’s Solar.web ID and password.               The JWT can be used in further calls to impersonate the user and execute calls in the context of this user.
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="inputNewToken">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Token</returns>
        Token IamJwtPost(string? scope = default(string?), InputNewToken? inputNewToken = default(InputNewToken?), int operationIndex = 0);

        /// <summary>
        /// Creates new token
        /// </summary>
        /// <remarks>
        /// This method creates a new JWT access token and also a refresh token by logging in with the user’s Solar.web ID and password.               The JWT can be used in further calls to impersonate the user and execute calls in the context of this user.
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="inputNewToken">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Token</returns>
        ApiResponse<Token> IamJwtPostWithHttpInfo(string? scope = default(string?), InputNewToken? inputNewToken = default(InputNewToken?), int operationIndex = 0);
        /// <summary>
        /// Revoke refresh token
        /// </summary>
        /// <remarks>
        /// This method invalidates a refresh token, e.g. for implementing a logout in an app.               Please note that this method does not invalidate existing JWT access tokens – they remain valid until they expire (usually within an hour).
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void IamJwtRefreshTokenDelete(string refreshToken, int operationIndex = 0);

        /// <summary>
        /// Revoke refresh token
        /// </summary>
        /// <remarks>
        /// This method invalidates a refresh token, e.g. for implementing a logout in an app.               Please note that this method does not invalidate existing JWT access tokens – they remain valid until they expire (usually within an hour).
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IamJwtRefreshTokenDeleteWithHttpInfo(string refreshToken, int operationIndex = 0);
        /// <summary>
        /// Generates new token using the refresh token
        /// </summary>
        /// <remarks>
        /// This method renews a JWT access token, e.g. after it expired (usually within an hour). You need to provide the refresh token for creating a new JWT access token.
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">Refresh token</param>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Token</returns>
        Token IamJwtRefreshTokenPatch(string refreshToken, string? scope = default(string?), int operationIndex = 0);

        /// <summary>
        /// Generates new token using the refresh token
        /// </summary>
        /// <remarks>
        /// This method renews a JWT access token, e.g. after it expired (usually within an hour). You need to provide the refresh token for creating a new JWT access token.
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">Refresh token</param>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Token</returns>
        ApiResponse<Token> IamJwtRefreshTokenPatchWithHttpInfo(string refreshToken, string? scope = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates new token
        /// </summary>
        /// <remarks>
        /// This method creates a new JWT access token and also a refresh token by logging in with the user’s Solar.web ID and password.               The JWT can be used in further calls to impersonate the user and execute calls in the context of this user.
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="inputNewToken">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        System.Threading.Tasks.Task<Token> IamJwtPostAsync(string? scope = default(string?), InputNewToken? inputNewToken = default(InputNewToken?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates new token
        /// </summary>
        /// <remarks>
        /// This method creates a new JWT access token and also a refresh token by logging in with the user’s Solar.web ID and password.               The JWT can be used in further calls to impersonate the user and execute calls in the context of this user.
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="inputNewToken">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<Token>> IamJwtPostWithHttpInfoAsync(string? scope = default(string?), InputNewToken? inputNewToken = default(InputNewToken?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke refresh token
        /// </summary>
        /// <remarks>
        /// This method invalidates a refresh token, e.g. for implementing a logout in an app.               Please note that this method does not invalidate existing JWT access tokens – they remain valid until they expire (usually within an hour).
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IamJwtRefreshTokenDeleteAsync(string refreshToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke refresh token
        /// </summary>
        /// <remarks>
        /// This method invalidates a refresh token, e.g. for implementing a logout in an app.               Please note that this method does not invalidate existing JWT access tokens – they remain valid until they expire (usually within an hour).
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IamJwtRefreshTokenDeleteWithHttpInfoAsync(string refreshToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generates new token using the refresh token
        /// </summary>
        /// <remarks>
        /// This method renews a JWT access token, e.g. after it expired (usually within an hour). You need to provide the refresh token for creating a new JWT access token.
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">Refresh token</param>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        System.Threading.Tasks.Task<Token> IamJwtRefreshTokenPatchAsync(string refreshToken, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generates new token using the refresh token
        /// </summary>
        /// <remarks>
        /// This method renews a JWT access token, e.g. after it expired (usually within an hour). You need to provide the refresh token for creating a new JWT access token.
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">Refresh token</param>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<Token>> IamJwtRefreshTokenPatchWithHttpInfoAsync(string refreshToken, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokensApi : ITokensApiSync, ITokensApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TokensApi : ITokensApi
    {
        private kern.services.FroniusSolarWebClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokensApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokensApi(string basePath)
        {
            this.Configuration = kern.services.FroniusSolarWebClient.Client.Configuration.MergeConfigurations(
                kern.services.FroniusSolarWebClient.Client.GlobalConfiguration.Instance,
                new kern.services.FroniusSolarWebClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = kern.services.FroniusSolarWebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TokensApi(kern.services.FroniusSolarWebClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = kern.services.FroniusSolarWebClient.Client.Configuration.MergeConfigurations(
                kern.services.FroniusSolarWebClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = kern.services.FroniusSolarWebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TokensApi(kern.services.FroniusSolarWebClient.Client.ISynchronousClient client, kern.services.FroniusSolarWebClient.Client.IAsynchronousClient asyncClient, kern.services.FroniusSolarWebClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = kern.services.FroniusSolarWebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public kern.services.FroniusSolarWebClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public kern.services.FroniusSolarWebClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public kern.services.FroniusSolarWebClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public kern.services.FroniusSolarWebClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates new token This method creates a new JWT access token and also a refresh token by logging in with the user’s Solar.web ID and password.               The JWT can be used in further calls to impersonate the user and execute calls in the context of this user.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="inputNewToken">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Token</returns>
        public Token IamJwtPost(string? scope = default(string?), InputNewToken? inputNewToken = default(InputNewToken?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<Token> localVarResponse = IamJwtPostWithHttpInfo(scope, inputNewToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new token This method creates a new JWT access token and also a refresh token by logging in with the user’s Solar.web ID and password.               The JWT can be used in further calls to impersonate the user and execute calls in the context of this user.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="inputNewToken">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Token</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<Token> IamJwtPostWithHttpInfo(string? scope = default(string?), InputNewToken? inputNewToken = default(InputNewToken?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            localVarRequestOptions.Data = inputNewToken;

            localVarRequestOptions.Operation = "TokensApi.IamJwtPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Token>("/iam/jwt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamJwtPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates new token This method creates a new JWT access token and also a refresh token by logging in with the user’s Solar.web ID and password.               The JWT can be used in further calls to impersonate the user and execute calls in the context of this user.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="inputNewToken">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        public async System.Threading.Tasks.Task<Token> IamJwtPostAsync(string? scope = default(string?), InputNewToken? inputNewToken = default(InputNewToken?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<Token> localVarResponse = await IamJwtPostWithHttpInfoAsync(scope, inputNewToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new token This method creates a new JWT access token and also a refresh token by logging in with the user’s Solar.web ID and password.               The JWT can be used in further calls to impersonate the user and execute calls in the context of this user.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="inputNewToken">Username and password (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<Token>> IamJwtPostWithHttpInfoAsync(string? scope = default(string?), InputNewToken? inputNewToken = default(InputNewToken?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            localVarRequestOptions.Data = inputNewToken;

            localVarRequestOptions.Operation = "TokensApi.IamJwtPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Token>("/iam/jwt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamJwtPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke refresh token This method invalidates a refresh token, e.g. for implementing a logout in an app.               Please note that this method does not invalidate existing JWT access tokens – they remain valid until they expire (usually within an hour).
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void IamJwtRefreshTokenDelete(string refreshToken, int operationIndex = 0)
        {
            IamJwtRefreshTokenDeleteWithHttpInfo(refreshToken);
        }

        /// <summary>
        /// Revoke refresh token This method invalidates a refresh token, e.g. for implementing a logout in an app.               Please note that this method does not invalidate existing JWT access tokens – they remain valid until they expire (usually within an hour).
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<Object> IamJwtRefreshTokenDeleteWithHttpInfo(string refreshToken, int operationIndex = 0)
        {
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'refreshToken' when calling TokensApi->IamJwtRefreshTokenDelete");
            }

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("refreshToken", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(refreshToken)); // path parameter

            localVarRequestOptions.Operation = "TokensApi.IamJwtRefreshTokenDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/iam/jwt/{refreshToken}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamJwtRefreshTokenDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke refresh token This method invalidates a refresh token, e.g. for implementing a logout in an app.               Please note that this method does not invalidate existing JWT access tokens – they remain valid until they expire (usually within an hour).
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IamJwtRefreshTokenDeleteAsync(string refreshToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await IamJwtRefreshTokenDeleteWithHttpInfoAsync(refreshToken, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke refresh token This method invalidates a refresh token, e.g. for implementing a logout in an app.               Please note that this method does not invalidate existing JWT access tokens – they remain valid until they expire (usually within an hour).
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<Object>> IamJwtRefreshTokenDeleteWithHttpInfoAsync(string refreshToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'refreshToken' when calling TokensApi->IamJwtRefreshTokenDelete");
            }


            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("refreshToken", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(refreshToken)); // path parameter

            localVarRequestOptions.Operation = "TokensApi.IamJwtRefreshTokenDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/iam/jwt/{refreshToken}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamJwtRefreshTokenDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates new token using the refresh token This method renews a JWT access token, e.g. after it expired (usually within an hour). You need to provide the refresh token for creating a new JWT access token.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">Refresh token</param>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Token</returns>
        public Token IamJwtRefreshTokenPatch(string refreshToken, string? scope = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<Token> localVarResponse = IamJwtRefreshTokenPatchWithHttpInfo(refreshToken, scope);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates new token using the refresh token This method renews a JWT access token, e.g. after it expired (usually within an hour). You need to provide the refresh token for creating a new JWT access token.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">Refresh token</param>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Token</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<Token> IamJwtRefreshTokenPatchWithHttpInfo(string refreshToken, string? scope = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'refreshToken' when calling TokensApi->IamJwtRefreshTokenPatch");
            }

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("refreshToken", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(refreshToken)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "TokensApi.IamJwtRefreshTokenPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Token>("/iam/jwt/{refreshToken}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamJwtRefreshTokenPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates new token using the refresh token This method renews a JWT access token, e.g. after it expired (usually within an hour). You need to provide the refresh token for creating a new JWT access token.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">Refresh token</param>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        public async System.Threading.Tasks.Task<Token> IamJwtRefreshTokenPatchAsync(string refreshToken, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<Token> localVarResponse = await IamJwtRefreshTokenPatchWithHttpInfoAsync(refreshToken, scope, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates new token using the refresh token This method renews a JWT access token, e.g. after it expired (usually within an hour). You need to provide the refresh token for creating a new JWT access token.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">Refresh token</param>
        /// <param name="scope">Optional scope parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<Token>> IamJwtRefreshTokenPatchWithHttpInfoAsync(string refreshToken, string? scope = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
            {
                throw new kern.services.FroniusSolarWebClient.Client.ApiException(400, "Missing required parameter 'refreshToken' when calling TokensApi->IamJwtRefreshTokenPatch");
            }


            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("refreshToken", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(refreshToken)); // path parameter
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }

            localVarRequestOptions.Operation = "TokensApi.IamJwtRefreshTokenPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Token>("/iam/jwt/{refreshToken}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IamJwtRefreshTokenPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
