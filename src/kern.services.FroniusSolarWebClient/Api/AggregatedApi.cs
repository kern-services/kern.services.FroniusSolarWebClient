/*
 * Solar.web Query API (SWQAPI)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using kern.services.FroniusSolarWebClient.Client;
using kern.services.FroniusSolarWebClient.Model;

namespace kern.services.FroniusSolarWebClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAggregatedApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method returns total lifetime aggregated data for a specific PV system.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        AggregatedValues PvsystemsPvSystemIdAggdataGet(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0);

        /// <summary>
        /// This method returns total lifetime aggregated data for a specific PV system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataGetWithHttpInfo(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0);
        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for all years since installation.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        AggregatedValues PvsystemsPvSystemIdAggdataYearsGet(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0);

        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for all years since installation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataYearsGetWithHttpInfo(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0);
        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for a specific year.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        AggregatedValues PvsystemsPvSystemIdAggdataYearsYearGet(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0);

        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for a specific year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearGetWithHttpInfo(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0);
        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific year.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        AggregatedValues PvsystemsPvSystemIdAggdataYearsYearMonthsGet(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0);

        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsGetWithHttpInfo(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0);
        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific date.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="day"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        AggregatedValues PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGet(Guid pvSystemId, int year, int month, int day, string? channel = default(string?), int operationIndex = 0);

        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="day"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGetWithHttpInfo(Guid pvSystemId, int year, int month, int day, string? channel = default(string?), int operationIndex = 0);
        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific month of a year.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        AggregatedValues PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGet(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0);

        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific month of a year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGetWithHttpInfo(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0);
        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific month of a year.
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        AggregatedValues PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGet(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0);

        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific month of a year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGetWithHttpInfo(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAggregatedApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// This method returns total lifetime aggregated data for a specific PV system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataGetAsync(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns total lifetime aggregated data for a specific PV system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataGetWithHttpInfoAsync(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for all years since installation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataYearsGetAsync(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for all years since installation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataYearsGetWithHttpInfoAsync(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for a specific year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearGetAsync(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for a specific year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataYearsYearGetWithHttpInfoAsync(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsGetAsync(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataYearsYearMonthsGetWithHttpInfoAsync(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="day"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGetAsync(Guid pvSystemId, int year, int month, int day, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific date.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="day"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGetWithHttpInfoAsync(Guid pvSystemId, int year, int month, int day, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific month of a year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGetAsync(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific month of a year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGetWithHttpInfoAsync(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific month of a year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGetAsync(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific month of a year.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGetWithHttpInfoAsync(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAggregatedApi : IAggregatedApiSync, IAggregatedApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AggregatedApi : IAggregatedApi
    {
        private kern.services.FroniusSolarWebClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AggregatedApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AggregatedApi(string basePath)
        {
            this.Configuration = kern.services.FroniusSolarWebClient.Client.Configuration.MergeConfigurations(
                kern.services.FroniusSolarWebClient.Client.GlobalConfiguration.Instance,
                new kern.services.FroniusSolarWebClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = kern.services.FroniusSolarWebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AggregatedApi(kern.services.FroniusSolarWebClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = kern.services.FroniusSolarWebClient.Client.Configuration.MergeConfigurations(
                kern.services.FroniusSolarWebClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = kern.services.FroniusSolarWebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AggregatedApi(kern.services.FroniusSolarWebClient.Client.ISynchronousClient client, kern.services.FroniusSolarWebClient.Client.IAsynchronousClient asyncClient, kern.services.FroniusSolarWebClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = kern.services.FroniusSolarWebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public kern.services.FroniusSolarWebClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public kern.services.FroniusSolarWebClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public kern.services.FroniusSolarWebClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public kern.services.FroniusSolarWebClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// This method returns total lifetime aggregated data for a specific PV system. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        public AggregatedValues PvsystemsPvSystemIdAggdataGet(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = PvsystemsPvSystemIdAggdataGetWithHttpInfo(pvSystemId, channel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns total lifetime aggregated data for a specific PV system. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataGetWithHttpInfo(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns total lifetime aggregated data for a specific PV system. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        public async System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataGetAsync(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = await PvsystemsPvSystemIdAggdataGetWithHttpInfoAsync(pvSystemId, channel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns total lifetime aggregated data for a specific PV system. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataGetWithHttpInfoAsync(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for all years since installation. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        public AggregatedValues PvsystemsPvSystemIdAggdataYearsGet(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = PvsystemsPvSystemIdAggdataYearsGetWithHttpInfo(pvSystemId, channel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for all years since installation. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataYearsGetWithHttpInfo(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataYearsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata/years", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataYearsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for all years since installation. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        public async System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataYearsGetAsync(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = await PvsystemsPvSystemIdAggdataYearsGetWithHttpInfoAsync(pvSystemId, channel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for all years since installation. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataYearsGetWithHttpInfoAsync(Guid pvSystemId, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataYearsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata/years", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataYearsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for a specific year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        public AggregatedValues PvsystemsPvSystemIdAggdataYearsYearGet(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = PvsystemsPvSystemIdAggdataYearsYearGetWithHttpInfo(pvSystemId, year, channel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for a specific year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearGetWithHttpInfo(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataYearsYearGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata/years/{year}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataYearsYearGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for a specific year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        public async System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearGetAsync(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = await PvsystemsPvSystemIdAggdataYearsYearGetWithHttpInfoAsync(pvSystemId, year, channel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns annual aggregated data for a specific PV system for a specific year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataYearsYearGetWithHttpInfoAsync(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataYearsYearGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata/years/{year}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataYearsYearGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        public AggregatedValues PvsystemsPvSystemIdAggdataYearsYearMonthsGet(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = PvsystemsPvSystemIdAggdataYearsYearMonthsGetWithHttpInfo(pvSystemId, year, channel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsGetWithHttpInfo(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataYearsYearMonthsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata/years/{year}/months", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataYearsYearMonthsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        public async System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsGetAsync(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = await PvsystemsPvSystemIdAggdataYearsYearMonthsGetWithHttpInfoAsync(pvSystemId, year, channel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataYearsYearMonthsGetWithHttpInfoAsync(Guid pvSystemId, int year, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(year)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataYearsYearMonthsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata/years/{year}/months", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataYearsYearMonthsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific date. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="day"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        public AggregatedValues PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGet(Guid pvSystemId, int year, int month, int day, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGetWithHttpInfo(pvSystemId, year, month, day, channel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific date. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="day"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGetWithHttpInfo(Guid pvSystemId, int year, int month, int day, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(month)); // path parameter
            localVarRequestOptions.PathParameters.Add("day", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(day)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata/years/{year}/months/{month}/days/{day}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific date. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="day"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        public async System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGetAsync(Guid pvSystemId, int year, int month, int day, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = await PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGetWithHttpInfoAsync(pvSystemId, year, month, day, channel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific date. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="day"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGetWithHttpInfoAsync(Guid pvSystemId, int year, int month, int day, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(month)); // path parameter
            localVarRequestOptions.PathParameters.Add("day", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(day)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata/years/{year}/months/{month}/days/{day}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysDayGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific month of a year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        public AggregatedValues PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGet(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGetWithHttpInfo(pvSystemId, year, month, channel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific month of a year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGetWithHttpInfo(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(month)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata/years/{year}/months/{month}/days", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific month of a year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        public async System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGetAsync(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = await PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGetWithHttpInfoAsync(pvSystemId, year, month, channel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns daily aggregated data for a specific PV system for a specific month of a year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGetWithHttpInfoAsync(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(month)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata/years/{year}/months/{month}/days", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataYearsYearMonthsMonthDaysGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific month of a year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AggregatedValues</returns>
        public AggregatedValues PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGet(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGetWithHttpInfo(pvSystemId, year, month, channel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific month of a year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AggregatedValues</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGetWithHttpInfo(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(month)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata/years/{year}/months/{month}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific month of a year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AggregatedValues</returns>
        public async System.Threading.Tasks.Task<AggregatedValues> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGetAsync(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues> localVarResponse = await PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGetWithHttpInfoAsync(pvSystemId, year, month, channel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns monthly aggregated data for a specific PV system for a specific month of a year. 
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId"></param>
        /// <param name="year"></param>
        /// <param name="month"></param>
        /// <param name="channel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AggregatedValues)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<AggregatedValues>> PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGetWithHttpInfoAsync(Guid pvSystemId, int year, int month, string? channel = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("year", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(month)); // path parameter
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }

            localVarRequestOptions.Operation = "AggregatedApi.PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AggregatedValues>("/pvsystems/{pvSystemId}/aggdata/years/{year}/months/{month}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdAggdataYearsYearMonthsMonthGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
