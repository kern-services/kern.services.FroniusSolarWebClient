/*
 * Solar.web Query API (SWQAPI)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using kern.services.FroniusSolarWebClient.Client;
using kern.services.FroniusSolarWebClient.Model;

namespace kern.services.FroniusSolarWebClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method returns number of PV Systems owned by user
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes no parameters and will return number of PV Systems that are owned by a user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Counter</returns>
        Counter PvsystemsCountGet(string? type = default(string?), string? meteo = default(string?), int operationIndex = 0);

        /// <summary>
        /// This method returns number of PV Systems owned by user
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes no parameters and will return number of PV Systems that are owned by a user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Counter</returns>
        ApiResponse<Counter> PvsystemsCountGetWithHttpInfo(string? type = default(string?), string? meteo = default(string?), int operationIndex = 0);
        /// <summary>
        /// This method returns list of all PV Systems and their details owned by user
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes no parameters and will return list of PV Systems that are owned by a user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PvSystemList</returns>
        PvSystemList PvsystemsGet(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0);

        /// <summary>
        /// This method returns list of all PV Systems and their details owned by user
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes no parameters and will return list of PV Systems that are owned by a user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PvSystemList</returns>
        ApiResponse<PvSystemList> PvsystemsGetWithHttpInfo(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0);
        /// <summary>
        /// This method returns list of all PV Systems (ids only) owned by user
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes no parameters and will return list of PV System IDs that are owned by a user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PvSystemIdsOnly</returns>
        PvSystemIdsOnly PvsystemsListGet(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0);

        /// <summary>
        /// This method returns list of all PV Systems (ids only) owned by user
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes no parameters and will return list of PV System IDs that are owned by a user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PvSystemIdsOnly</returns>
        ApiResponse<PvSystemIdsOnly> PvsystemsListGetWithHttpInfo(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0);
        /// <summary>
        /// This method returns number of devices contained within single PV System
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return number of devices within that PV System (also owned by user whose api key was used to send request)
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Counter</returns>
        Counter PvsystemsPvSystemIdDevicesCountGet(Guid pvSystemId, string? type = default(string?), bool? isActive = default(bool?), int operationIndex = 0);

        /// <summary>
        /// This method returns number of devices contained within single PV System
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return number of devices within that PV System (also owned by user whose api key was used to send request)
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Counter</returns>
        ApiResponse<Counter> PvsystemsPvSystemIdDevicesCountGetWithHttpInfo(Guid pvSystemId, string? type = default(string?), bool? isActive = default(bool?), int operationIndex = 0);
        /// <summary>
        /// This method returns single device and its details
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID and device ID as parameters and returns device (and its details) whose id was sent with request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System which contains certain device</param>
        /// <param name="deviceId">ID of a device user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Device</returns>
        Device PvsystemsPvSystemIdDevicesDeviceIdGet(Guid pvSystemId, Guid deviceId, int operationIndex = 0);

        /// <summary>
        /// This method returns single device and its details
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID and device ID as parameters and returns device (and its details) whose id was sent with request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System which contains certain device</param>
        /// <param name="deviceId">ID of a device user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> PvsystemsPvSystemIdDevicesDeviceIdGetWithHttpInfo(Guid pvSystemId, Guid deviceId, int operationIndex = 0);
        /// <summary>
        /// This method returns list of all devices contained within single PV System
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return list of all devices and their details contained within that PV System (also owned by user whose api key was used to send request)
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceList</returns>
        DeviceList PvsystemsPvSystemIdDevicesGet(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0);

        /// <summary>
        /// This method returns list of all devices contained within single PV System
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return list of all devices and their details contained within that PV System (also owned by user whose api key was used to send request)
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceList</returns>
        ApiResponse<DeviceList> PvsystemsPvSystemIdDevicesGetWithHttpInfo(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0);
        /// <summary>
        /// This method returns list of all device ids, within single PV System
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return list of all devices (their ids), contained within that PV System (also owned by user whose api key was used to send request)
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceIdsOnly</returns>
        DeviceIdsOnly PvsystemsPvSystemIdDevicesListGet(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0);

        /// <summary>
        /// This method returns list of all device ids, within single PV System
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return list of all devices (their ids), contained within that PV System (also owned by user whose api key was used to send request)
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceIdsOnly</returns>
        ApiResponse<DeviceIdsOnly> PvsystemsPvSystemIdDevicesListGetWithHttpInfo(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0);
        /// <summary>
        /// This method returns single PV System and its details
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return details of that PV Systems, also owned by user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PvSystem</returns>
        PvSystem PvsystemsPvSystemIdGet(Guid pvSystemId, int operationIndex = 0);

        /// <summary>
        /// This method returns single PV System and its details
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return details of that PV Systems, also owned by user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PvSystem</returns>
        ApiResponse<PvSystem> PvsystemsPvSystemIdGetWithHttpInfo(Guid pvSystemId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// This method returns number of PV Systems owned by user
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes no parameters and will return number of PV Systems that are owned by a user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Counter</returns>
        System.Threading.Tasks.Task<Counter> PvsystemsCountGetAsync(string? type = default(string?), string? meteo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns number of PV Systems owned by user
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes no parameters and will return number of PV Systems that are owned by a user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Counter)</returns>
        System.Threading.Tasks.Task<ApiResponse<Counter>> PvsystemsCountGetWithHttpInfoAsync(string? type = default(string?), string? meteo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method returns list of all PV Systems and their details owned by user
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes no parameters and will return list of PV Systems that are owned by a user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PvSystemList</returns>
        System.Threading.Tasks.Task<PvSystemList> PvsystemsGetAsync(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns list of all PV Systems and their details owned by user
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes no parameters and will return list of PV Systems that are owned by a user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PvSystemList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PvSystemList>> PvsystemsGetWithHttpInfoAsync(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method returns list of all PV Systems (ids only) owned by user
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes no parameters and will return list of PV System IDs that are owned by a user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PvSystemIdsOnly</returns>
        System.Threading.Tasks.Task<PvSystemIdsOnly> PvsystemsListGetAsync(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns list of all PV Systems (ids only) owned by user
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes no parameters and will return list of PV System IDs that are owned by a user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PvSystemIdsOnly)</returns>
        System.Threading.Tasks.Task<ApiResponse<PvSystemIdsOnly>> PvsystemsListGetWithHttpInfoAsync(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method returns number of devices contained within single PV System
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return number of devices within that PV System (also owned by user whose api key was used to send request)
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Counter</returns>
        System.Threading.Tasks.Task<Counter> PvsystemsPvSystemIdDevicesCountGetAsync(Guid pvSystemId, string? type = default(string?), bool? isActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns number of devices contained within single PV System
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return number of devices within that PV System (also owned by user whose api key was used to send request)
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Counter)</returns>
        System.Threading.Tasks.Task<ApiResponse<Counter>> PvsystemsPvSystemIdDevicesCountGetWithHttpInfoAsync(Guid pvSystemId, string? type = default(string?), bool? isActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method returns single device and its details
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID and device ID as parameters and returns device (and its details) whose id was sent with request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System which contains certain device</param>
        /// <param name="deviceId">ID of a device user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> PvsystemsPvSystemIdDevicesDeviceIdGetAsync(Guid pvSystemId, Guid deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns single device and its details
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID and device ID as parameters and returns device (and its details) whose id was sent with request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System which contains certain device</param>
        /// <param name="deviceId">ID of a device user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> PvsystemsPvSystemIdDevicesDeviceIdGetWithHttpInfoAsync(Guid pvSystemId, Guid deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method returns list of all devices contained within single PV System
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return list of all devices and their details contained within that PV System (also owned by user whose api key was used to send request)
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceList</returns>
        System.Threading.Tasks.Task<DeviceList> PvsystemsPvSystemIdDevicesGetAsync(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns list of all devices contained within single PV System
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return list of all devices and their details contained within that PV System (also owned by user whose api key was used to send request)
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceList>> PvsystemsPvSystemIdDevicesGetWithHttpInfoAsync(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method returns list of all device ids, within single PV System
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return list of all devices (their ids), contained within that PV System (also owned by user whose api key was used to send request)
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceIdsOnly</returns>
        System.Threading.Tasks.Task<DeviceIdsOnly> PvsystemsPvSystemIdDevicesListGetAsync(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns list of all device ids, within single PV System
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return list of all devices (their ids), contained within that PV System (also owned by user whose api key was used to send request)
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceIdsOnly)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceIdsOnly>> PvsystemsPvSystemIdDevicesListGetWithHttpInfoAsync(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This method returns single PV System and its details
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return details of that PV Systems, also owned by user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PvSystem</returns>
        System.Threading.Tasks.Task<PvSystem> PvsystemsPvSystemIdGetAsync(Guid pvSystemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This method returns single PV System and its details
        /// </summary>
        /// <remarks>
        /// Metadata method - this method takes PV System ID as its parameter and will return details of that PV Systems, also owned by user whose api key was used to send request
        /// </remarks>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PvSystem)</returns>
        System.Threading.Tasks.Task<ApiResponse<PvSystem>> PvsystemsPvSystemIdGetWithHttpInfoAsync(Guid pvSystemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataApi : IMetadataApiSync, IMetadataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetadataApi : IMetadataApi
    {
        private kern.services.FroniusSolarWebClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataApi(string basePath)
        {
            this.Configuration = kern.services.FroniusSolarWebClient.Client.Configuration.MergeConfigurations(
                kern.services.FroniusSolarWebClient.Client.GlobalConfiguration.Instance,
                new kern.services.FroniusSolarWebClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = kern.services.FroniusSolarWebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetadataApi(kern.services.FroniusSolarWebClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = kern.services.FroniusSolarWebClient.Client.Configuration.MergeConfigurations(
                kern.services.FroniusSolarWebClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new kern.services.FroniusSolarWebClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = kern.services.FroniusSolarWebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetadataApi(kern.services.FroniusSolarWebClient.Client.ISynchronousClient client, kern.services.FroniusSolarWebClient.Client.IAsynchronousClient asyncClient, kern.services.FroniusSolarWebClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = kern.services.FroniusSolarWebClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public kern.services.FroniusSolarWebClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public kern.services.FroniusSolarWebClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public kern.services.FroniusSolarWebClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public kern.services.FroniusSolarWebClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// This method returns number of PV Systems owned by user Metadata method - this method takes no parameters and will return number of PV Systems that are owned by a user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Counter</returns>
        public Counter PvsystemsCountGet(string? type = default(string?), string? meteo = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<Counter> localVarResponse = PvsystemsCountGetWithHttpInfo(type, meteo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns number of PV Systems owned by user Metadata method - this method takes no parameters and will return number of PV Systems that are owned by a user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Counter</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<Counter> PvsystemsCountGetWithHttpInfo(string? type = default(string?), string? meteo = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (meteo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "meteo", meteo));
            }

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsCountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Counter>("/pvsystems-count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsCountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns number of PV Systems owned by user Metadata method - this method takes no parameters and will return number of PV Systems that are owned by a user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Counter</returns>
        public async System.Threading.Tasks.Task<Counter> PvsystemsCountGetAsync(string? type = default(string?), string? meteo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<Counter> localVarResponse = await PvsystemsCountGetWithHttpInfoAsync(type, meteo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns number of PV Systems owned by user Metadata method - this method takes no parameters and will return number of PV Systems that are owned by a user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Counter)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<Counter>> PvsystemsCountGetWithHttpInfoAsync(string? type = default(string?), string? meteo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (meteo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "meteo", meteo));
            }

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsCountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Counter>("/pvsystems-count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsCountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns list of all PV Systems and their details owned by user Metadata method - this method takes no parameters and will return list of PV Systems that are owned by a user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PvSystemList</returns>
        public PvSystemList PvsystemsGet(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<PvSystemList> localVarResponse = PvsystemsGetWithHttpInfo(type, offset, limit, meteo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns list of all PV Systems and their details owned by user Metadata method - this method takes no parameters and will return list of PV Systems that are owned by a user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PvSystemList</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<PvSystemList> PvsystemsGetWithHttpInfo(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (meteo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "meteo", meteo));
            }

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PvSystemList>("/pvsystems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns list of all PV Systems and their details owned by user Metadata method - this method takes no parameters and will return list of PV Systems that are owned by a user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PvSystemList</returns>
        public async System.Threading.Tasks.Task<PvSystemList> PvsystemsGetAsync(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<PvSystemList> localVarResponse = await PvsystemsGetWithHttpInfoAsync(type, offset, limit, meteo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns list of all PV Systems and their details owned by user Metadata method - this method takes no parameters and will return list of PV Systems that are owned by a user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PvSystemList)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<PvSystemList>> PvsystemsGetWithHttpInfoAsync(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (meteo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "meteo", meteo));
            }

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PvSystemList>("/pvsystems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns list of all PV Systems (ids only) owned by user Metadata method - this method takes no parameters and will return list of PV System IDs that are owned by a user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PvSystemIdsOnly</returns>
        public PvSystemIdsOnly PvsystemsListGet(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<PvSystemIdsOnly> localVarResponse = PvsystemsListGetWithHttpInfo(type, offset, limit, meteo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns list of all PV Systems (ids only) owned by user Metadata method - this method takes no parameters and will return list of PV System IDs that are owned by a user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PvSystemIdsOnly</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<PvSystemIdsOnly> PvsystemsListGetWithHttpInfo(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (meteo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "meteo", meteo));
            }

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsListGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PvSystemIdsOnly>("/pvsystems-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns list of all PV Systems (ids only) owned by user Metadata method - this method takes no parameters and will return list of PV System IDs that are owned by a user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PvSystemIdsOnly</returns>
        public async System.Threading.Tasks.Task<PvSystemIdsOnly> PvsystemsListGetAsync(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<PvSystemIdsOnly> localVarResponse = await PvsystemsListGetWithHttpInfoAsync(type, offset, limit, meteo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns list of all PV Systems (ids only) owned by user Metadata method - this method takes no parameters and will return list of PV System IDs that are owned by a user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="meteo">Meteo filter - \&quot;pro\&quot; or \&quot;light\&quot;. Filters PV Systems by Meteo data value (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PvSystemIdsOnly)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<PvSystemIdsOnly>> PvsystemsListGetWithHttpInfoAsync(string? type = default(string?), int? offset = default(int?), int? limit = default(int?), string? meteo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (meteo != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "meteo", meteo));
            }

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsListGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PvSystemIdsOnly>("/pvsystems-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns number of devices contained within single PV System Metadata method - this method takes PV System ID as its parameter and will return number of devices within that PV System (also owned by user whose api key was used to send request)
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Counter</returns>
        public Counter PvsystemsPvSystemIdDevicesCountGet(Guid pvSystemId, string? type = default(string?), bool? isActive = default(bool?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<Counter> localVarResponse = PvsystemsPvSystemIdDevicesCountGetWithHttpInfo(pvSystemId, type, isActive);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns number of devices contained within single PV System Metadata method - this method takes PV System ID as its parameter and will return number of devices within that PV System (also owned by user whose api key was used to send request)
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Counter</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<Counter> PvsystemsPvSystemIdDevicesCountGetWithHttpInfo(Guid pvSystemId, string? type = default(string?), bool? isActive = default(bool?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "isActive", isActive));
            }

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsPvSystemIdDevicesCountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Counter>("/pvsystems/{pvSystemId}/devices-count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdDevicesCountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns number of devices contained within single PV System Metadata method - this method takes PV System ID as its parameter and will return number of devices within that PV System (also owned by user whose api key was used to send request)
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Counter</returns>
        public async System.Threading.Tasks.Task<Counter> PvsystemsPvSystemIdDevicesCountGetAsync(Guid pvSystemId, string? type = default(string?), bool? isActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<Counter> localVarResponse = await PvsystemsPvSystemIdDevicesCountGetWithHttpInfoAsync(pvSystemId, type, isActive, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns number of devices contained within single PV System Metadata method - this method takes PV System ID as its parameter and will return number of devices within that PV System (also owned by user whose api key was used to send request)
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Counter)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<Counter>> PvsystemsPvSystemIdDevicesCountGetWithHttpInfoAsync(Guid pvSystemId, string? type = default(string?), bool? isActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "isActive", isActive));
            }

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsPvSystemIdDevicesCountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Counter>("/pvsystems/{pvSystemId}/devices-count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdDevicesCountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns single device and its details Metadata method - this method takes PV System ID and device ID as parameters and returns device (and its details) whose id was sent with request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System which contains certain device</param>
        /// <param name="deviceId">ID of a device user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Device</returns>
        public Device PvsystemsPvSystemIdDevicesDeviceIdGet(Guid pvSystemId, Guid deviceId, int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<Device> localVarResponse = PvsystemsPvSystemIdDevicesDeviceIdGetWithHttpInfo(pvSystemId, deviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns single device and its details Metadata method - this method takes PV System ID and device ID as parameters and returns device (and its details) whose id was sent with request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System which contains certain device</param>
        /// <param name="deviceId">ID of a device user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Device</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<Device> PvsystemsPvSystemIdDevicesDeviceIdGetWithHttpInfo(Guid pvSystemId, Guid deviceId, int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsPvSystemIdDevicesDeviceIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Device>("/pvsystems/{pvSystemId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdDevicesDeviceIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns single device and its details Metadata method - this method takes PV System ID and device ID as parameters and returns device (and its details) whose id was sent with request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System which contains certain device</param>
        /// <param name="deviceId">ID of a device user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> PvsystemsPvSystemIdDevicesDeviceIdGetAsync(Guid pvSystemId, Guid deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<Device> localVarResponse = await PvsystemsPvSystemIdDevicesDeviceIdGetWithHttpInfoAsync(pvSystemId, deviceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns single device and its details Metadata method - this method takes PV System ID and device ID as parameters and returns device (and its details) whose id was sent with request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System which contains certain device</param>
        /// <param name="deviceId">ID of a device user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<Device>> PvsystemsPvSystemIdDevicesDeviceIdGetWithHttpInfoAsync(Guid pvSystemId, Guid deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsPvSystemIdDevicesDeviceIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Device>("/pvsystems/{pvSystemId}/devices/{deviceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdDevicesDeviceIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns list of all devices contained within single PV System Metadata method - this method takes PV System ID as its parameter and will return list of all devices and their details contained within that PV System (also owned by user whose api key was used to send request)
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceList</returns>
        public DeviceList PvsystemsPvSystemIdDevicesGet(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<DeviceList> localVarResponse = PvsystemsPvSystemIdDevicesGetWithHttpInfo(pvSystemId, type, offset, limit, isActive);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns list of all devices contained within single PV System Metadata method - this method takes PV System ID as its parameter and will return list of all devices and their details contained within that PV System (also owned by user whose api key was used to send request)
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceList</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<DeviceList> PvsystemsPvSystemIdDevicesGetWithHttpInfo(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "isActive", isActive));
            }

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsPvSystemIdDevicesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DeviceList>("/pvsystems/{pvSystemId}/devices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdDevicesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns list of all devices contained within single PV System Metadata method - this method takes PV System ID as its parameter and will return list of all devices and their details contained within that PV System (also owned by user whose api key was used to send request)
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceList</returns>
        public async System.Threading.Tasks.Task<DeviceList> PvsystemsPvSystemIdDevicesGetAsync(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<DeviceList> localVarResponse = await PvsystemsPvSystemIdDevicesGetWithHttpInfoAsync(pvSystemId, type, offset, limit, isActive, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns list of all devices contained within single PV System Metadata method - this method takes PV System ID as its parameter and will return list of all devices and their details contained within that PV System (also owned by user whose api key was used to send request)
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceList)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<DeviceList>> PvsystemsPvSystemIdDevicesGetWithHttpInfoAsync(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "isActive", isActive));
            }

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsPvSystemIdDevicesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DeviceList>("/pvsystems/{pvSystemId}/devices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdDevicesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns list of all device ids, within single PV System Metadata method - this method takes PV System ID as its parameter and will return list of all devices (their ids), contained within that PV System (also owned by user whose api key was used to send request)
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceIdsOnly</returns>
        public DeviceIdsOnly PvsystemsPvSystemIdDevicesListGet(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<DeviceIdsOnly> localVarResponse = PvsystemsPvSystemIdDevicesListGetWithHttpInfo(pvSystemId, type, offset, limit, isActive);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns list of all device ids, within single PV System Metadata method - this method takes PV System ID as its parameter and will return list of all devices (their ids), contained within that PV System (also owned by user whose api key was used to send request)
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceIdsOnly</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<DeviceIdsOnly> PvsystemsPvSystemIdDevicesListGetWithHttpInfo(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "isActive", isActive));
            }

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsPvSystemIdDevicesListGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DeviceIdsOnly>("/pvsystems/{pvSystemId}/devices-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdDevicesListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns list of all device ids, within single PV System Metadata method - this method takes PV System ID as its parameter and will return list of all devices (their ids), contained within that PV System (also owned by user whose api key was used to send request)
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceIdsOnly</returns>
        public async System.Threading.Tasks.Task<DeviceIdsOnly> PvsystemsPvSystemIdDevicesListGetAsync(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<DeviceIdsOnly> localVarResponse = await PvsystemsPvSystemIdDevicesListGetWithHttpInfoAsync(pvSystemId, type, offset, limit, isActive, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns list of all device ids, within single PV System Metadata method - this method takes PV System ID as its parameter and will return list of all devices (their ids), contained within that PV System (also owned by user whose api key was used to send request)
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System whose devices are requested for inspection</param>
        /// <param name="type">Type filter - one or more (coma separated, no spaces) types of devices that pv system should contain. (optional)</param>
        /// <param name="offset">Skip this many elements. (optional)</param>
        /// <param name="limit">Return max this many elements. (optional)</param>
        /// <param name="isActive">If set to \&quot;true\&quot;, only active devices will be selected. If set to \&quot;false\&quot; only inactive devices will be selected. If it&#39;s not defined, both active and inactive devices will be selected. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceIdsOnly)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<DeviceIdsOnly>> PvsystemsPvSystemIdDevicesListGetWithHttpInfoAsync(Guid pvSystemId, string? type = default(string?), int? offset = default(int?), int? limit = default(int?), bool? isActive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToMultiMap("", "isActive", isActive));
            }

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsPvSystemIdDevicesListGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DeviceIdsOnly>("/pvsystems/{pvSystemId}/devices-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdDevicesListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns single PV System and its details Metadata method - this method takes PV System ID as its parameter and will return details of that PV Systems, also owned by user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PvSystem</returns>
        public PvSystem PvsystemsPvSystemIdGet(Guid pvSystemId, int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<PvSystem> localVarResponse = PvsystemsPvSystemIdGetWithHttpInfo(pvSystemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns single PV System and its details Metadata method - this method takes PV System ID as its parameter and will return details of that PV Systems, also owned by user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PvSystem</returns>
        public kern.services.FroniusSolarWebClient.Client.ApiResponse<PvSystem> PvsystemsPvSystemIdGetWithHttpInfo(Guid pvSystemId, int operationIndex = 0)
        {
            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsPvSystemIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PvSystem>("/pvsystems/{pvSystemId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This method returns single PV System and its details Metadata method - this method takes PV System ID as its parameter and will return details of that PV Systems, also owned by user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PvSystem</returns>
        public async System.Threading.Tasks.Task<PvSystem> PvsystemsPvSystemIdGetAsync(Guid pvSystemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            kern.services.FroniusSolarWebClient.Client.ApiResponse<PvSystem> localVarResponse = await PvsystemsPvSystemIdGetWithHttpInfoAsync(pvSystemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This method returns single PV System and its details Metadata method - this method takes PV System ID as its parameter and will return details of that PV Systems, also owned by user whose api key was used to send request
        /// </summary>
        /// <exception cref="kern.services.FroniusSolarWebClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pvSystemId">ID of a PV System user requires to inspect</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PvSystem)</returns>
        public async System.Threading.Tasks.Task<kern.services.FroniusSolarWebClient.Client.ApiResponse<PvSystem>> PvsystemsPvSystemIdGetWithHttpInfoAsync(Guid pvSystemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            kern.services.FroniusSolarWebClient.Client.RequestOptions localVarRequestOptions = new kern.services.FroniusSolarWebClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = kern.services.FroniusSolarWebClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pvSystemId", kern.services.FroniusSolarWebClient.Client.ClientUtils.ParameterToString(pvSystemId)); // path parameter

            localVarRequestOptions.Operation = "MetadataApi.PvsystemsPvSystemIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AccessKeyId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyId")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyId", this.Configuration.GetApiKeyWithPrefix("AccessKeyId"));
            }
            // authentication (AccessKeyValue) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AccessKeyValue")))
            {
                localVarRequestOptions.HeaderParameters.Add("AccessKeyValue", this.Configuration.GetApiKeyWithPrefix("AccessKeyValue"));
            }
            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PvSystem>("/pvsystems/{pvSystemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PvsystemsPvSystemIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
