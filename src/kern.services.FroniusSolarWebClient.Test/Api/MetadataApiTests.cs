/*
 * Solar.web Query API (SWQAPI)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using kern.services.FroniusSolarWebClient.Client;
using kern.services.FroniusSolarWebClient.Api;
// uncomment below to import models
//using kern.services.FroniusSolarWebClient.Model;

namespace kern.services.FroniusSolarWebClient.Test.Api
{
    /// <summary>
    ///  Class for testing MetadataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MetadataApiTests : IDisposable
    {
        private MetadataApi instance;

        public MetadataApiTests()
        {
            instance = new MetadataApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MetadataApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MetadataApi
            //Assert.IsType<MetadataApi>(instance);
        }

        /// <summary>
        /// Test PvsystemsCountGet
        /// </summary>
        [Fact]
        public void PvsystemsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? type = null;
            //string? meteo = null;
            //var response = instance.PvsystemsCountGet(type, meteo);
            //Assert.IsType<Counter>(response);
        }

        /// <summary>
        /// Test PvsystemsGet
        /// </summary>
        [Fact]
        public void PvsystemsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? type = null;
            //int? offset = null;
            //int? limit = null;
            //string? meteo = null;
            //var response = instance.PvsystemsGet(type, offset, limit, meteo);
            //Assert.IsType<PvSystemList>(response);
        }

        /// <summary>
        /// Test PvsystemsListGet
        /// </summary>
        [Fact]
        public void PvsystemsListGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? type = null;
            //int? offset = null;
            //int? limit = null;
            //string? meteo = null;
            //var response = instance.PvsystemsListGet(type, offset, limit, meteo);
            //Assert.IsType<PvSystemIdsOnly>(response);
        }

        /// <summary>
        /// Test PvsystemsPvSystemIdDevicesCountGet
        /// </summary>
        [Fact]
        public void PvsystemsPvSystemIdDevicesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid pvSystemId = null;
            //string? type = null;
            //bool? isActive = null;
            //var response = instance.PvsystemsPvSystemIdDevicesCountGet(pvSystemId, type, isActive);
            //Assert.IsType<Counter>(response);
        }

        /// <summary>
        /// Test PvsystemsPvSystemIdDevicesDeviceIdGet
        /// </summary>
        [Fact]
        public void PvsystemsPvSystemIdDevicesDeviceIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid pvSystemId = null;
            //Guid deviceId = null;
            //var response = instance.PvsystemsPvSystemIdDevicesDeviceIdGet(pvSystemId, deviceId);
            //Assert.IsType<Device>(response);
        }

        /// <summary>
        /// Test PvsystemsPvSystemIdDevicesGet
        /// </summary>
        [Fact]
        public void PvsystemsPvSystemIdDevicesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid pvSystemId = null;
            //string? type = null;
            //int? offset = null;
            //int? limit = null;
            //bool? isActive = null;
            //var response = instance.PvsystemsPvSystemIdDevicesGet(pvSystemId, type, offset, limit, isActive);
            //Assert.IsType<DeviceList>(response);
        }

        /// <summary>
        /// Test PvsystemsPvSystemIdDevicesListGet
        /// </summary>
        [Fact]
        public void PvsystemsPvSystemIdDevicesListGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid pvSystemId = null;
            //string? type = null;
            //int? offset = null;
            //int? limit = null;
            //bool? isActive = null;
            //var response = instance.PvsystemsPvSystemIdDevicesListGet(pvSystemId, type, offset, limit, isActive);
            //Assert.IsType<DeviceIdsOnly>(response);
        }

        /// <summary>
        /// Test PvsystemsPvSystemIdGet
        /// </summary>
        [Fact]
        public void PvsystemsPvSystemIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid pvSystemId = null;
            //var response = instance.PvsystemsPvSystemIdGet(pvSystemId);
            //Assert.IsType<PvSystem>(response);
        }
    }
}
